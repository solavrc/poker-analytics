version: 2

models:
  - name: stg_hands
    description: >
      ポーカーハンドの基本情報を格納するステージングモデル。
      EVT_DEALイベントから抽出された、ハンドの開始時の状態を記録する。

      主な用途:
      - ゲームタイプの識別 (トーナメント/リングゲーム)
      - ブラインド構造の把握
      - コミュニティカードの記録
      - プレイヤーの着席位置の管理
      - アンティの有無と金額の確認

      ゲームタイプの詳細:
      1. トーナメント
         - ブラインドは時間とともに上昇
         - 全プレイヤーの初期スタックは同じ
         - アンティが発生する可能性あり
      2. リングゲーム
         - ブラインドは固定
         - プレイヤーごとに異なるスタックでプレイ可能
         - アンティは通常なし

      ポジションと着席位置:
      1. 基本的なポジション
         - ボタン (BTN) : 最後に行動するポジション
         - スモールブラインド (SB) : 強制ベットを支払う最初のポジション
         - ビッグブラインド (BB) : SBの2倍の強制ベットを支払うポジション
      2. 特殊なケース
         - ヘッズアップ: SBがボタンを兼ねる
         - 3人プレイ: BTN=SB, BB, UTGの3ポジション
         - プレイヤー不在の席: seat_user_idsの該当インデックスは-1

      コミュニティカードの管理:
      1. フロップ (3枚)
         - 最初に公開される3枚のカード
         - community_cardsの0-2番目の要素
      2. ターン (1枚)
         - 4番目に公開されるカード
         - community_cardsの3番目の要素
      3. リバー (1枚)
         - 最後に公開されるカード
         - community_cardsの4番目の要素
      4. カード表現
         - 数値形式: 0-51の整数 (community_cards)
         - 文字列形式: 'Ah'のような2文字 (community_cards_str)

      注意事項:
      - プレイヤーの切断により空席が発生する可能性がある
      - トーナメントとリングゲームでブラインド構造が異なる
      - アンティはトーナメントの後半で導入されることが多い
      - コミュニティカードは必ずしも5枚全てが公開されるわけではない
      - ヘッズアップではポジションの扱いが特殊になる

    columns:
      - name: hand_id
        description: >
          ハンドを一意に識別するID。
          他のテーブルとの結合キーとなる。
        tests:
          - unique
          - not_null

      - name: game_type
        description: >
          ゲームの種類を示す数値。
          TOURNAMENT: ブラインドが上昇し、全プレイヤーの初期スタックが同じ
          RING_GAME: ブラインドが固定で、プレイヤーごとに異なるスタック
        tests:
          - not_null
          - accepted_values:
              values: [TOURNAMENT, RING_GAME]

      - name: button_seat
        description: >
          ディーラーボタンの位置を示すシートインデックス (0-5) 。
          最後に行動するポジション。
          ヘッズアップの場合はSBと同じ位置となる。
        tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 5

      - name: sb_seat
        description: >
          スモールブラインドの位置を示すシートインデックス (0-5) 。
          最初の強制ベットを支払うポジション。
          ヘッズアップの場合はボタンと同じ位置となる。
        tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 5

      - name: bb_seat
        description: >
          ビッグブラインドの位置を示すシートインデックス (0-5) 。
          2番目の強制ベットを支払うポジション。
          プリフロップで最後に行動する。
        tests:
          - not_null
          - dbt_utils.accepted_range:
              min_value: 0
              max_value: 5

      - name: sb
        description: >
          スモールブラインドの金額。
          トーナメントでは時間とともに上昇する。
          リングゲームでは固定値。
        tests:
          - not_null

      - name: bb
        description: >
          ビッグブラインドの金額。
          通常はsbの2倍の値。
          最小ベット額の基準となる。
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: ">= sb * 2"

      - name: ante
        description: >
          アンティの金額。
          主にトーナメントの後半で発生する。
          全プレイヤーが支払う必要がある。
          0の場合はアンティなし。
        tests:
          - not_null

      - name: community_cards
        description: >
          コミュニティカードを数値配列で表現。
          各カードは0-51の数値で表され、以下の計算で変換できる:
          - ランク = FLOOR(数値 / 4) [0=2, 1=3, ..., 12=A]
          - スート = 数値 % 4 [0=s, 1=h, 2=d, 3=c]
          配列の順序はフロップ (3枚) 、ターン (1枚) 、リバー (1枚) 。

      - name: community_cards_str
        description: >
          コミュニティカードを文字列配列で表現。
          例:
          - フロップのみ: ['Ah', 'Kd', '2c']
          - フロップ+ターン: ['Ah', 'Kd', '2c', 'Ts']
          - 全て: ['Ah', 'Kd', '2c', 'Ts', '3h']
          配列の順序はフロップ (3枚) 、ターン (1枚) 、リバー (1枚) 。

      - name: seat_user_ids
        description: >
          各シートに着席しているプレイヤーのIDを配列で表現。
          インデックスはシート番号 (0-5) に対応。
          プレイヤーが着席していない場合は-1。
          例: [123, 456, -1, 789, -1, 234]
